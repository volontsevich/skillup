c
@obj_array[0]
@obj_array0]
@obj_array.[0]
@obj_array.first.first
@obj_array.first
@obj_array.first[":0"]
@obj_array.first[:0]
@obj_array.first[0]
@obj_array.first
c
@obj_array.first
@obj_array
c
@obj_array[0]
@obj_array.first
@obj_array
c
answers.class
answers.type
c
answers.html_safe
answers
c
@responds_in_hash[0]
@responds_in_hash
c
@responds_in_hash
@responds_in_hash[ind+1]
c
@responds_in_hash
c
@responds_in_hash[0]
@responds_in_hash[2]
ind
@responds_in_hash
@responds_in_hash[ind+1]
c
@responds_in_hash
c
@emails
c
SurveyMail.where('survey_id=1').select(:address)
SurveyMail.where('survey_id=1')
SurveyMails.where('survey_id=1')
mails
c
SurveyMail.where('survey_id=1')
SurveyMail.find_by_survey_id(1)
SurveyMail.find_by_survey_id(survey.id)
mails[0][:address]
mails[0]
mails
SurveyMails.where('mails'
mails[:address]
mails["address"]
mails
mails=SurveyMail.where('survey_id=1').select(:address)
SurveyMail.where('survey_id=1')
SurveyMail.where('survey_id=1').select(:address)
SurveyMail.select(:address)
SurveyMail.find_by_survey_id(1).select(:address)
SurveyMail.find_by_survey_id(1)
SurveyMail.first
c
UserMailer.send_survey(@survey)
@survey
c
—Å
c
Respond.group(:content).count
Respond.count(:content).group(:content)
Respond.count(:content)
Respond.calculate(:count, :content)
Respond.select(:id, count(:content)).group(:content)
Respond.select(:id, "count(responds.content) as total").group(:content)
Respond.select(:id, "count(Respond.content) as total").group(:content)
Respond.select(:id, "count(Responds.content) as total").group(:content)
Respond.select(:id, "count(skill_up.responds.content) as total").group(:content)
Respond.select("skill_up.responds.id, count(skill_up.responds.content) as total").group("skill_up.responds.content")
Respond.select("skill_up.responds.id, count(skill_up.responds.content) as total").group(:content)
Respond.select("responds.id, count(responds.content) as total").group(:content)
Respond.select("id, count(content) as total").group(:content)
Respond.select("count(content) as total").group(:content)
Respond.where('survey_id=?', 3).select("count(content) as total, content").group(:content)
Respond.where('survey_id=?', 3).select("count(content)")
Respond.where('survey_id=?', 3).select("count(content")
Respond.where('survey_id=?', 3)
d
fa.select("Count(content) as total", content)
fa.select("Count(respond.content) as total", respond.content)
c
(byebug) fa.select("Count(respond.content) as total", respond.content)
fa.select("Count(responds.content) as total", responds.content)
fa.select("Count(content) as total", content)
arr
fa
c
arr
fa[1]
c
ActiveSupport::JSON.decode(Respond.where('survey_id=? and question_id=?', 41, 74).first.content).first.value
ActiveSupport::JSON.decode(Respond.where('survey_id=? and question_id=?', 41, 74).first.content).value
ActiveSupport::JSON.decode(Respond.where('survey_id=? and question_id=?', 41, 74).first.content).first
ActiveSupport::JSON.decode(Respond.where('survey_id=? and question_id=?', 41, 74).first.content)
ActiveSupport::JSON.decode(Respond.where('survey_id=? and question_id=?', 41, 74).first.content))
Respond.where('survey_id=? and question_id=?', 41, 74).first.content
c
ActiveSupport::JSON.decode(Respond.where('survey_id=? and question_id=?', 41, 74).first.content))
ActiveSupport::JSON.decode(Respond.where('survey_id=? and question_id=?', 41, 74).first))
Respond.where('survey_id=? and question_id=?', 41, 74).first
Respond.where('survey_id=? and question_id=?', 41, 74)
Respond.where('survey_id=? and question_id=?', survey.id, question.id)
Respond.where('survey_id=? and question_id=?', survey.id, question.id).first.content
c
Respond.where('survey_id=? and question_id=?',41,72).first.content.to_s
Respond.where('survey_id=? and question_id=?',41,72).first.content
Respond.where('survey_id=?',41)
c
params
c
question["0"]
question[:survey]
question
c
question
c
question
c
params[:respond][:questions]
params[:respond]
params[:questions]
params
c
ActiveSupport::JSON.decode(@survey.questions[0][:meta])["1"]
ActiveSupport::JSON.decode(@survey.questions[0][:meta])[1]
ActiveSupport::JSON.decode(@survey.questions[0][:meta])
@survey.questions[0][:meta]
@survey.questions[0]
@survey.questions
@survey
obj
c
params[:survey][:questions_attributes]["0"]
params[:survey]
params
c
pc
c
p
c
pc
c
prp
c
params[:survey][:questions_attributes]
params[:survey]
params
c
@surveys
c
@surveys[0].questions
@surveys[0]
@surveys
c
Respond.select(:survey_id)
@responds
c
Respond.select(:question_id).distinct
@responds
c
params
c
params
c
@survey_id
params
c
survey_params
@survey
c
params
c
params
c
v[:answers_attributes]
c
v[:answers_attributes]
v
params
c
params[:survey][:questions_attributes]["0"][:answers_attributes]["0"][:content]
params[:survey][:questions_attributes]["0"][:answers_attributes][0][:content]
params[:survey][:questions_attributes]["0"][:answers_attributes]["0"][:content]
params[:survey][:questions_attributes]["0"][:answers_attributes]["0"]
params[:survey][:questions_attributes]["0"][:answers_attributes]
params[:survey][:questions_attributes][0][:answers_attributes]
params[:survey][:questions_attributes]["0"][answers_attributes]
params[:survey][:questions_attributes]["0"]
params
params[:survey][:questions_attributes][0][answers_attributes]
params[:survey][:questions_attributes][answers_attributes]
params[:survey][:questions_attributes]
params[:survey]
params[:survey][:question_attributes]
params[:question_attributes]
params
c
params
c
current_user
@user
params
c
@user
params
c
current_user
params
c
@user
params
c
params
c
params
c
@user
c
@user
c
@user
c
@user
user
c
params
c
Survey.find_by(user_id: 1)
Survey.find_by_user_id(1)
c
Survey.find_by_user_id(2)
Survey.find_by_user_id(1)
Survey.find(1)
@surveys
c
params[:survey][:questions_attributes]
params[:survey]
params
c
params
c
params
c
params
c
